/*
 * MicrovisionChain API Document
 *
 * API definition for MicrovisionChain provided apis
 *
 * The version of the OpenAPI document: 3.0.11
 * Contact: heqiming@metasv.com
 * Generated by: https://openapi-generator.tech
 */

/// BatchBroadcastResult : Batch broadcast result



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BatchBroadcastResult {
    /// Already known transactions detected during processing (if there are any)
    #[serde(rename = "known", skip_serializing_if = "Option::is_none")]
    pub known: Option<Vec<String>>,
    /// Transactions accepted by the mempool and then evicted due to insufficient fee (if there are any)
    #[serde(rename = "evicted", skip_serializing_if = "Option::is_none")]
    pub evicted: Option<Vec<String>>,
    /// Transactions that failed to be accepted by the mempool (if there are any)
    #[serde(rename = "invalid", skip_serializing_if = "Option::is_none")]
    pub invalid: Option<Vec<crate::models::InvalidBroadCast>>,
}

impl BatchBroadcastResult {
    /// Batch broadcast result
    pub fn new() -> BatchBroadcastResult {
        BatchBroadcastResult {
            known: None,
            evicted: None,
            invalid: None,
        }
    }
}


