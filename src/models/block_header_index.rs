/*
 * MicrovisionChain API Document
 *
 * API definition for MicrovisionChain provided apis
 *
 * The version of the OpenAPI document: 3.0.11
 * Contact: heqiming@metasv.com
 * Generated by: https://openapi-generator.tech
 */

/// BlockHeaderIndex : Detailed block header info.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BlockHeaderIndex {
    /// Block hash.
    #[serde(rename = "blockHash", skip_serializing_if = "Option::is_none")]
    pub block_hash: Option<String>,
    /// Block height.
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    pub height: Option<i64>,
    /// Block version.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
    /// The block hash of the previous block.
    #[serde(rename = "prevBlockHash", skip_serializing_if = "Option::is_none")]
    pub prev_block_hash: Option<String>,
    /// Hex formatted block merkle root.
    #[serde(rename = "merkleRoot", skip_serializing_if = "Option::is_none")]
    pub merkle_root: Option<String>,
    /// Block timestamp.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i64>,
    /// Block median timestamp.
    #[serde(rename = "medianTime", skip_serializing_if = "Option::is_none")]
    pub median_time: Option<i64>,
    /// Miner total rewards, including miner fee.
    #[serde(rename = "reward", skip_serializing_if = "Option::is_none")]
    pub reward: Option<i64>,
    /// Guessed miner name.
    #[serde(rename = "miner", skip_serializing_if = "Option::is_none")]
    pub miner: Option<String>,
    /// Miner address that received rewards.
    #[serde(rename = "minerAddress", skip_serializing_if = "Option::is_none")]
    pub miner_address: Option<String>,
    /// Total txs count included in the block.
    #[serde(rename = "txCount", skip_serializing_if = "Option::is_none")]
    pub tx_count: Option<i32>,
    /// Total input count in the block.
    #[serde(rename = "inputCount", skip_serializing_if = "Option::is_none")]
    pub input_count: Option<i32>,
    /// Total output count in the block
    #[serde(rename = "outputCount", skip_serializing_if = "Option::is_none")]
    pub output_count: Option<i32>,
    /// Size of the block
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    /// Target bits.
    #[serde(rename = "bits", skip_serializing_if = "Option::is_none")]
    pub bits: Option<i64>,
    /// Block nonce
    #[serde(rename = "nonce", skip_serializing_if = "Option::is_none")]
    pub nonce: Option<i64>,
    /// Hex formated coinbase info.
    #[serde(rename = "coinbase", skip_serializing_if = "Option::is_none")]
    pub coinbase: Option<String>,
}

impl BlockHeaderIndex {
    /// Detailed block header info.
    pub fn new() -> BlockHeaderIndex {
        BlockHeaderIndex {
            block_hash: None,
            height: None,
            version: None,
            prev_block_hash: None,
            merkle_root: None,
            timestamp: None,
            median_time: None,
            reward: None,
            miner: None,
            miner_address: None,
            tx_count: None,
            input_count: None,
            output_count: None,
            size: None,
            bits: None,
            nonce: None,
            coinbase: None,
        }
    }
}


