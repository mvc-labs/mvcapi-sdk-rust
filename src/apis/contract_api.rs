/*
 * MicrovisionChain API Document
 *
 * API definition for MicrovisionChain provided apis
 *
 * The version of the OpenAPI document: 3.0.11
 * Contact: heqiming@metasv.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`contract_ft_address_address_balance_confirmed_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractFtAddressAddressBalanceConfirmedGetError {
    Status401(Vec<crate::models::ErrorResponse>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_ft_address_address_balance_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractFtAddressAddressBalanceGetError {
    Status401(Vec<crate::models::ErrorResponse>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_ft_address_address_code_hash_genesis_tx_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractFtAddressAddressCodeHashGenesisTxGetError {
    Status401(Vec<crate::models::ErrorResponse>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_ft_address_address_utxo_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractFtAddressAddressUtxoGetError {
    Status401(Vec<crate::models::ErrorResponse>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_ft_genesis_code_hash_genesis_circulation_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractFtGenesisCodeHashGenesisCirculationGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_nft_address_address_count_confirmed_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractNftAddressAddressCountConfirmedGetError {
    Status401(Vec<crate::models::ErrorResponse>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_nft_address_address_summary_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractNftAddressAddressSummaryGetError {
    Status401(Vec<crate::models::ErrorResponse>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_nft_address_address_utxo_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractNftAddressAddressUtxoGetError {
    Status401(Vec<crate::models::ErrorResponse>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_nft_genesis_code_hash_genesis_summary_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractNftGenesisCodeHashGenesisSummaryGetError {
    Status401(Vec<crate::models::ErrorResponse>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_nft_genesis_code_hash_genesis_utxo_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractNftGenesisCodeHashGenesisUtxoGetError {
    Status401(Vec<crate::models::ErrorResponse>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_nft_sell_address_address_utxo_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractNftSellAddressAddressUtxoGetError {
    Status401(Vec<crate::models::ErrorResponse>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_nft_sell_genesis_code_hash_genesis_utxo_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractNftSellGenesisCodeHashGenesisUtxoGetError {
    Status401(Vec<crate::models::ErrorResponse>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_unique_genesis_code_hash_genesis_utxo_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractUniqueGenesisCodeHashGenesisUtxoGetError {
    Status401(Vec<crate::models::ErrorResponse>),
    UnknownValue(serde_json::Value),
}


pub async fn contract_ft_address_address_balance_confirmed_get(configuration: &configuration::Configuration, address: &str, code_hash: &str, genesis: &str) -> Result<i64, Error<ContractFtAddressAddressBalanceConfirmedGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/ft/address/{address}/balance/confirmed", local_var_configuration.base_path, address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("codeHash", &code_hash.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("genesis", &genesis.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractFtAddressAddressBalanceConfirmedGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn contract_ft_address_address_balance_get(configuration: &configuration::Configuration, address: &str, code_hash: Option<&str>, genesis: Option<&str>) -> Result<Vec<crate::models::ContractFtBalance>, Error<ContractFtAddressAddressBalanceGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/ft/address/{address}/balance", local_var_configuration.base_path, address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = code_hash {
        local_var_req_builder = local_var_req_builder.query(&[("codeHash", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = genesis {
        local_var_req_builder = local_var_req_builder.query(&[("genesis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractFtAddressAddressBalanceGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn contract_ft_address_address_code_hash_genesis_tx_get(configuration: &configuration::Configuration, address: &str, code_hash: &str, genesis: &str, limit: Option<i64>, flag: Option<&str>) -> Result<Vec<crate::models::ContractFtAddressTx>, Error<ContractFtAddressAddressCodeHashGenesisTxGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/ft/address/{address}/{codeHash}/{genesis}/tx", local_var_configuration.base_path, address=crate::apis::urlencode(address), codeHash=crate::apis::urlencode(code_hash), genesis=crate::apis::urlencode(genesis));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = flag {
        local_var_req_builder = local_var_req_builder.query(&[("flag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractFtAddressAddressCodeHashGenesisTxGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn contract_ft_address_address_utxo_get(configuration: &configuration::Configuration, address: &str, code_hash: Option<&str>, genesis: Option<&str>, flag: Option<&str>) -> Result<Vec<crate::models::ContractFtUtxo>, Error<ContractFtAddressAddressUtxoGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/ft/address/{address}/utxo", local_var_configuration.base_path, address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = code_hash {
        local_var_req_builder = local_var_req_builder.query(&[("codeHash", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = genesis {
        local_var_req_builder = local_var_req_builder.query(&[("genesis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = flag {
        local_var_req_builder = local_var_req_builder.query(&[("flag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractFtAddressAddressUtxoGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn contract_ft_genesis_code_hash_genesis_circulation_get(configuration: &configuration::Configuration, code_hash: &str, genesis: &str) -> Result<crate::models::ContractFtGenesisCirculation, Error<ContractFtGenesisCodeHashGenesisCirculationGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/ft/genesis/{codeHash}/{genesis}/circulation", local_var_configuration.base_path, codeHash=crate::apis::urlencode(code_hash), genesis=crate::apis::urlencode(genesis));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractFtGenesisCodeHashGenesisCirculationGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn contract_nft_address_address_count_confirmed_get(configuration: &configuration::Configuration, address: &str, code_hash: &str, genesis: &str) -> Result<i32, Error<ContractNftAddressAddressCountConfirmedGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/nft/address/{address}/count/confirmed", local_var_configuration.base_path, address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("codeHash", &code_hash.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("genesis", &genesis.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractNftAddressAddressCountConfirmedGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn contract_nft_address_address_summary_get(configuration: &configuration::Configuration, address: &str) -> Result<Vec<crate::models::ContractNftAddressSummary>, Error<ContractNftAddressAddressSummaryGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/nft/address/{address}/summary", local_var_configuration.base_path, address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractNftAddressAddressSummaryGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn contract_nft_address_address_utxo_get(configuration: &configuration::Configuration, address: &str, code_hash: Option<&str>, genesis: Option<&str>, limit: Option<i32>, flag: Option<&str>) -> Result<Vec<crate::models::ContractNftUtxo>, Error<ContractNftAddressAddressUtxoGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/nft/address/{address}/utxo", local_var_configuration.base_path, address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = code_hash {
        local_var_req_builder = local_var_req_builder.query(&[("codeHash", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = genesis {
        local_var_req_builder = local_var_req_builder.query(&[("genesis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = flag {
        local_var_req_builder = local_var_req_builder.query(&[("flag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractNftAddressAddressUtxoGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn contract_nft_genesis_code_hash_genesis_summary_get(configuration: &configuration::Configuration, code_hash: &str, genesis: &str) -> Result<Vec<crate::models::ContractNftGenesisSummary>, Error<ContractNftGenesisCodeHashGenesisSummaryGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/nft/genesis/{codeHash}/{genesis}/summary", local_var_configuration.base_path, codeHash=crate::apis::urlencode(code_hash), genesis=crate::apis::urlencode(genesis));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractNftGenesisCodeHashGenesisSummaryGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn contract_nft_genesis_code_hash_genesis_utxo_get(configuration: &configuration::Configuration, code_hash: &str, genesis: &str, token_index: Option<i64>, max: Option<i64>, min: Option<i64>) -> Result<Vec<crate::models::ContractNftUtxo>, Error<ContractNftGenesisCodeHashGenesisUtxoGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/nft/genesis/{codeHash}/{genesis}/utxo", local_var_configuration.base_path, codeHash=crate::apis::urlencode(code_hash), genesis=crate::apis::urlencode(genesis));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token_index {
        local_var_req_builder = local_var_req_builder.query(&[("tokenIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max {
        local_var_req_builder = local_var_req_builder.query(&[("max", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min {
        local_var_req_builder = local_var_req_builder.query(&[("min", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractNftGenesisCodeHashGenesisUtxoGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn contract_nft_sell_address_address_utxo_get(configuration: &configuration::Configuration, address: &str, code_hash: Option<&str>, genesis: Option<&str>, limit: Option<i32>, flag: Option<&str>) -> Result<Vec<crate::models::ContractNftSellUtxo>, Error<ContractNftSellAddressAddressUtxoGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/nft/sell/address/{address}/utxo", local_var_configuration.base_path, address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = code_hash {
        local_var_req_builder = local_var_req_builder.query(&[("codeHash", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = genesis {
        local_var_req_builder = local_var_req_builder.query(&[("genesis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = flag {
        local_var_req_builder = local_var_req_builder.query(&[("flag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractNftSellAddressAddressUtxoGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn contract_nft_sell_genesis_code_hash_genesis_utxo_get(configuration: &configuration::Configuration, code_hash: &str, genesis: &str, token_index: Option<i64>, max: Option<i64>, min: Option<i64>) -> Result<Vec<crate::models::ContractNftSellUtxo>, Error<ContractNftSellGenesisCodeHashGenesisUtxoGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/nft/sell/genesis/{codeHash}/{genesis}/utxo", local_var_configuration.base_path, codeHash=crate::apis::urlencode(code_hash), genesis=crate::apis::urlencode(genesis));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token_index {
        local_var_req_builder = local_var_req_builder.query(&[("tokenIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max {
        local_var_req_builder = local_var_req_builder.query(&[("max", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min {
        local_var_req_builder = local_var_req_builder.query(&[("min", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractNftSellGenesisCodeHashGenesisUtxoGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn contract_unique_genesis_code_hash_genesis_utxo_get(configuration: &configuration::Configuration, code_hash: &str, genesis: &str) -> Result<Vec<crate::models::ContractUniqueUtxo>, Error<ContractUniqueGenesisCodeHashGenesisUtxoGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract/unique/genesis/{codeHash}/{genesis}/utxo", local_var_configuration.base_path, codeHash=crate::apis::urlencode(code_hash), genesis=crate::apis::urlencode(genesis));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractUniqueGenesisCodeHashGenesisUtxoGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

